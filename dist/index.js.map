{"version":3,"sources":["../index.js"],"names":["url","require","microGraphiql","send","json","get","post","options","router","db","cors","bodyParser","ws","req","res","writeHead","end","listen","schema","execute","subscribe","onOperation","message","params","token","payload","authToken","context","server","path","on","e","console","log","graphqlHandler","client","headers","authorization","Promise","resolve","reject","next","err","Error","body","method","undefined","query","parse","then","response","catch","gglResponse","graphiqlHandler","endpointURL","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import \"regenerator-runtime/runtime\"\nimport { buildSchema } from './graphql/schema'\nimport { processRequest } from 'apollo-upload-server'\nimport typeis from 'type-is'\nimport { runHttpQuery } from 'apollo-server-core'\nconst {microGraphiql} = require('apollo-server-micro')\nconst {send, json} = require('micro')\nconst {get, post, options, router} = require('microrouter')\nconst db = require('./db')\nconst cors = require('micro-cors')()\nconst bodyParser = require('body-parser')\nimport Book from './models/Book'\nimport BookComment from './models/BookComment'\nimport Category from './models/Category'\nimport BugReport from './models/BugReport'\nimport Record from './models/Record'\nimport Collection from './models/Collection'\nimport Cart from './models/Cart'\nimport Reserve from './models/Reserve'\nimport Conversation from './models/Conversation'\nimport Post from './models/Post'\nimport Feedback from './models/Feedback'\nimport ReadPlan from './models/ReadPlan'\n// import { GetLogedUserIDQuery } from './graphql/constants'\nimport * as url from 'url'\nimport { execute, subscribe } from 'graphql'\nimport { createServer } from 'http'\nimport { SubscriptionServer } from 'subscriptions-transport-ws'\nimport { getClient } from './ApolloClient'\n\n// Create WebSocket listener server\nconst ws = createServer((req, res) => {\n  res.writeHead(404)\n  res.end()\n})\nws.listen('5000', async () => {\n  const schema = await buildSchema()\n  new SubscriptionServer({\n    execute,\n    subscribe,\n    schema,\n    onOperation: async (message, params) => {\n      const token = message.payload.authToken\n      let options = { ...params, context: { ...params.context }}\n      if (token) {\n        options.context.authToken = token\n        // const client = getClient(token)\n        // try {\n        //   const {data: {logedUser}} = await client.query({query: GetLogedUserIDQuery})\n        //   options.context.authToken = token\n        // } catch (e) { }\n      }\n      return options\n    }\n    // onConnect: async (connectionParams, webSocket) => {\n    //   if (connectionParams.authorization) {\n    //     console.log(connectionParams.authorization)\n    //     const client = getClient(connectionParams.authorization)\n    //     const { data: { logedUser } } = await client.query({query: GetLogedUserIDQuery})\n    //     return { currentUser: logedUser.id }\n    //   }\n    //   throw new Error('Missing auth token!');\n    // }\n  }, {\n    server: ws,\n    path: '/subscriptions'\n  })\n})\nws.on('error', (e) => {console.log(e)})\n/**\n * 此处需要注意：graphqlHandler可以是异步函数，但是它必须接受req和res两个参数。因为microGraphql({})返回的是\n * async (req, res) => {}形式的函数，否则会报：\"string\" must be a string的错误，因为不识别graphqlHandler\n * 将其作为字符串来解析了。\n **/\n//micro的res对象是通过直接函数返回值返回客户端的，与express有巨大差异。\n  //由于使用body-parser使graphqlHandler多层嵌套，内层函数返回值无法返回返回外层，\n  // 所以使用Promise以及async/await来实现同步等待并接收内层函数返回值\nlet graphqlHandler = async (req, res) => {\n  // console.log(req.headers.authorization)\n  const context = {\n    db,\n    client: getClient(req.headers.authorization),\n    authorization: req.headers.authorization\n  }\n  const gglResponse = await new Promise((resolve, reject) => {\n    const next = async (err) => {\n      if (err instanceof Error) {\n        throw err\n      }\n      if (typeis(req, ['multipart/form-data'])) {\n        req.body = await processRequest(req)\n        // console.log(req.body.variables.files)\n      } else {\n        if (req.method === 'POST') {\n          try {\n            req.body = await json(req);\n          } catch (err) {\n            req.body = undefined;\n          }\n        } else {\n          req.query = url.parse(req.url, true).query;\n        }\n      }\n      const schema = await buildSchema()\n      // console.log(req.headers.authorization)\n      runHttpQuery([req, res], {\n        method: req.method,\n        options: {\n          schema,\n          context\n        },\n        query: req.method === 'POST' ? req.body : req.query\n      }).then((response) => resolve(response)).catch((err) => reject(err))\n    }\n    bodyParser.json()(req, res, next)\n  })\n  return gglResponse\n}\ngraphqlHandler = cors(graphqlHandler)\nconst graphiqlHandler = microGraphiql({\n  endpointURL: '/graphql'\n})\nconst server = router(\n  options('/graphql', cors()),\n  get('/graphql', graphqlHandler ),\n  post('/graphql', graphqlHandler),\n  get('/graphiql', graphiqlHandler),\n  post('/graphiql', graphiqlHandler),\n  (req, res) => send(res, 404, 'not found')\n)\n\nmodule.exports = server"]}