{"version":3,"sources":["../ApolloClient.js"],"names":["getClient","token","customFetch","uri","options","headers","Authorization","link","fetch","cache"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AAEA;AACA;AACA;AACA;AACO,IAAMA,gCAAY,SAAZA,SAAY,CAACC,KAAD,EAAW;AAClC,MAAMC,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAMC,OAAN,EAAkB;AACpC,QAAIH,KAAJ,EAAWG,QAAQC,OAAR,CAAgBC,aAAhB,GAAgCL,KAAhC;AACX,WAAO,yBAAME,GAAN,EAAWC,OAAX,CAAP;AACD,GAHD;AAIA,SAAO,+BAAiB;AACtBG,UAAM,oCAAe,EAAEJ,uBAAF,EAAiBK,OAAON,WAAxB,EAAf,CADgB;AAEtBO,WAAO;AAFe,GAAjB,CAAP;AAID,CATM","file":"ApolloClient.js","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport fetch from 'node-fetch'\nimport { localUrl } from './settings'\n/*使用ApolloClient来实现microservices之间的互相调用，client对象存储在context里，\n在resolver中可以通过context.client.query|mutate来调用其他微服务（如UploadService）*/\n// export const client = new ApolloClient({\n//   link: new HttpLink({ uri: localUrl, fetch: fetch }),\n//   cache: new InMemoryCache()\n// })\nexport const getClient = (token) => {\n  const customFetch = (uri, options) => {\n    if (token) options.headers.Authorization = token\n    return fetch(uri, options)\n  }\n  return new ApolloClient({\n    link: createHttpLink({ uri: localUrl, fetch: customFetch }),\n    cache: new InMemoryCache()\n  })\n}"]}