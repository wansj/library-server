{"version":3,"sources":["../../graphql/resolvers.js"],"names":["getChildren","categories","parent","children","forEach","category","push","_id","concat","locale","meridiem","hour","minute","isLowercase","weekdays","pubsub","POST_ADDED","resolvers","Date","name","description","parseValue","value","serialize","getTime","parseLiteral","ast","kind","INT","parseInt","Upload","Error","File","id","obj","args","context","file","rest","Book","scheduledCount","Reserve","db","model","Promise","resolve","reject","aggregate","match","$expr","$in","$toString","$map","input","as","in","unwind","group","count","$sum","exec","result","first","BugReport","Category","findById","lean","Record","book","findOne","isbn","timeout","returnDate","now","deadline","canDelay","client","query","variables","userId","user","data","delayTimes","role","maxDelayTimes","BookComment","thumbs","useful","length","Collection","books","bookIds","map","e","Post","info","messageType","message","Feedback","ReadPlan","Plan","bookId","process","lookup","from","let","pipeline","$match","$and","$eq","$project","project","record","$arrayElemAt","console","log","reocrd","timespan","date","start","end","total","diff","Math","round","Query","find","skip","limit","bookByISBN","bookByCoverID","cover","booksHaveCover","where","ne","booksWithoutCover","booksFiltered","filter","keyword","$text","$search","score","$meta","sort","regex","RegExp","publisher","gte","authors","sortBy","bookCount","selectOptions","p1","distinct","p2","p3","all","then","translators","publishers","rootCategories","childrenCategories","childrenByPath","path","$graphLookup","startWith","connectFromField","connectToField","$concat","$reduce","initialValue","$cond","$size","docs","hasChildCategories","err","bugCovers","nin","buggy","or","coverId","outdatedRecords","valueOf","to","state","lte","records","gt","lt","add","toDate","equals","username","userByName","logedUser","isAdmin","userStatistics","maxHoldBooksCount","maxHoldCount","$ne","res","document","toObject","virtuals","borrowed","doc","num","credit","Number","toFixed","set","Set","has","readCount","recentRead","slice","isbns","interests","coversPage","page","size","tag","fetchPolicy","covers","$nin","coversIDs","JSON","stringify","hasMore","coversCount","coversTotal","unrelatedCount","bugsCount","collection","collectedBooks","$push","$mergeObjects","iat","sliced","a","b","popularAuthors","bookComment","bookComments","details","title","postDate","$sort","bookCommentsByUser","bookCommentsProfile","groupCount","max","$max","totalScore","$multiply","level","percent","$divide","average","hasThumbed","hasUserCommented","comment","cartCount","Cart","cart","get","booksInCart","localField","foreignField","subsInCart","booksInPlan","expireAt","results","getSession","participators","queries","len","Conversation","item","save","conversation","posts","sessionId","year","$year","month","$dateToString","format","day","postBy","status","issueAt","$dateFromString","dateString","feedbacks","readPlans","reduce","memo","split","pop","props","mostBorrowed","mostCollected","mostRecommanded","Mutation","batchAddBooks","select","filteredBooks","indexOf","insertMany","ordered","error","addBook","bookAdded","updateBookByID","mutate","mutation","catch","batchUpdateBookCover","maps","bulkWriteOperations","updateOne","update","bulkWrite","bulkOpResult","delBookById","findByIdAndRemove","bookDeleted","addCategory","categoryAdded","updateCategory","findByIdAndUpdate","new","removeCategory","delIDs","deleteMany","addBugReport","bugReport","updateBugStatus","borrowBooks","promise","maxBorrowDuration","defer","promises","Books","startTransaction","returnBooks","delayReturn","recordId","maxDelayDays","delUnrelatedCovers","addToCollection","col","findIndex","delFromCollection","findOneAndUpdate","$pull","$each","addBookComment","removeBookComment","thumbBookComment","$addToSet","unThumbBookComment","addToCart","upsert","nModified","removeFromCart","moveFromCartToCollection","$not","addToSubscription","subscriptions","removeFromSubscription","addToBorrowPlan","statistics","borrowPlan","plan","removeFromBorrowPlan","moveToCart","addPost","receiver","unread","post","postAdded","publish","commitFeedback","feedback","handleFeedback","rejectReason","adminEmail","email","postedUser","nodemailer","require","transporter","createTransport","host","port","secure","auth","pass","mailOptions","subject","text","html","sendMail","addToReturnPlan","createReadPlan","plans","createAt","readPlan","delReadPlan","Subscription","subscribe","asyncIterator","payload"],"mappings":"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","file":"resolvers.js","sourcesContent":["/**\n * 对于Enum类型，如果不希望使用其name作为value,可以在resolver中以：\n * EnumTypeName: {\n *    key1: value1,\n *    key2: value2\n *        .\n *        .\n *        .\n * }这种形式来提供resolver。\n * 目前我所知的定义Enum的语法：enum ColorTypes { RED BLUE BLACK }只支持一维的Values([value1, value2...])，\n * 不支持二维的Values(例如[{key1: value1},{key2: value2}...])\n * https://www.apollographql.com/docs/graphql-tools/scalars.html中Internal Values有介绍Enum的用法\n **/\nimport { withFilter } from 'graphql-subscriptions'\nimport { RedisPubSub } from 'graphql-redis-subscriptions'\nimport gql from 'graphql-tag'\nimport { GraphQLScalarType } from 'graphql'\nimport { Kind } from 'graphql/language'\nimport moment from 'moment'\nimport {\n  MAX_BORROW_DURATION, DEFAULT_CHECK_DURATION, RECENT_READ_COUNT, INTEREST_CATEGORIES_COUNT,\n  MAX_HOLD_BOOKS_COUNT\n} from '../settings'\nimport Transaction from './transactions'\nimport {GetUserByIdQuery, GetUserByNamequery, BooksHaveCoverQuery, BugCoversQuery, CoversQuery, CoversPageQuery,\n  CoversTotalQuery, DeleteCoverMutation, DeleteFilesMutation, GetBookByIDQuery, GetLogedUserIDQuery, AddFriendMutation} from './constants'\nimport { emailAccount, emailPassword } from '../settings'\nimport { fmtPostDate } from '../utils'\n\nconst getChildren = (categories, parent) => {\n  let children = []\n  categories.forEach((category) => {\n    if (category.parent === parent) {\n      children.push(category._id)\n      children = children.concat(getChildren(categories, category._id))\n    }\n  })\n  return children\n}\nmoment.locale('zh-cn', {\n  meridiem : function (hour, minute, isLowercase) {\n    if (hour >= 2 && hour < 5) return '凌晨'\n    else if (hour >= 5 && hour < 8) return '早晨'\n    else if (hour >= 8 && hour < 12) return '上午'\n    else if (hour >= 12 && hour < 14) return '中午'\n    else if (hour >= 14 && hour < 18) return '下午'\n    else if (hour >= 18 && hour < 22) return '晚上'\n    else return '深夜'\n  },\n  weekdays : [\n    \"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"\n  ]\n})\nconst pubsub = new RedisPubSub()\nconst POST_ADDED = 'postAdded'\n// const FRIEND_ADDED = 'friendAdded'\nconst resolvers = {\n    Date: new GraphQLScalarType({\n      name: 'Date',\n      description: 'Date custom scalar type',\n      parseValue(value) {\n        return new Date(value) // value from the client\n      },\n      serialize(value) {\n        if (value instanceof Date)\n          return value.getTime() // value sent to the client\n        else\n          return new Date(value).getTime()\n      },\n      parseLiteral(ast) {\n        if (ast.kind === Kind.INT) {\n          return parseInt(ast.value, 10) // ast value is always in string format\n        }\n        return null\n      }\n    }),\n    Upload: new GraphQLScalarType({\n    name: 'Upload',\n    description:\n    'The `Upload` scalar type represents a file upload promise that resolves ' +\n    'an object containing `stream`, `filename`, `mimetype` and `encoding`.',\n    // value from the client\n    parseValue(value) {\n      return value\n    },\n    // ast value is always in string format\n    parseLiteral(ast) {\n      throw new Error('Upload scalar literal unsupported')\n    },\n    // value sent to the client\n    serialize(value) {\n      return value\n      // return JSON.stringify(value)\n    }\n  }),\n    File: {\n      id (obj, args, context) {\n        // console.log(obj)\n        return obj.id\n      },\n      file (obj, args, context) {\n        const { id, ...rest } = obj\n        return rest\n      }\n    },\n    Book: {\n      id (obj, args, context) {\n        return obj._id || obj.id\n      },\n      // 计算count时减去已预定的数量。\n      scheduledCount (obj, args, context) {\n        const Reserve = context.db.model('Reserve')\n        return new Promise(async (resolve, reject) => {\n          try {\n            // 不能直接使用BorrowPlan.count({bookIds: obj._id})原因是obj._id是对象，不能简单的用eq来判断相等\n            // 所以只好先用个pipeline把当前所有已预约的图书全选出来，然后再筛选判断当前图书是否在预约的图书中，判断的时候都转化为字符串再比较\n            const aggregate = Reserve.aggregate().match({\n              kind: 'BORROW',\n              $expr: {\n                $in: [{\n                  $toString: obj._id\n                }, {\n                  $map: {\n                    input: '$bookIds',\n                    as: 'bookId',\n                    in: {$toString: '$$bookId'}\n                  }\n                }]\n              }\n            }).unwind('$bookIds').group({\n              _id: '$bookIds',\n              count: {$sum: 1}\n            })\n            const result = await aggregate.exec()\n            const [first] = result\n            resolve(first ? first.count : 0)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      }\n    },\n    BugReport: {\n      id (obj, args, context) {\n        return obj._id\n      }\n    },\n    Category: {\n      id (obj, args, context) {\n        return obj._id\n      },\n      parent (obj, args, context) {\n        const Category = context.db.model('Category')\n        return Category.findById(obj.parent).lean().exec()\n      }\n    },\n    Record: {\n      id (obj, args, context) {\n        return obj._id\n      },\n      book (obj, args, context) {\n        const Book = context.db.model('Book')\n        return Book.findOne({isbn: obj.isbn}).exec()\n      },\n      timeout (obj, args, context) {\n        return ( obj.returnDate || Date.now() ) > obj.deadline\n      },\n      canDelay (obj, args, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data:{user}} = await context.client.query({\n              query: GetUserByIdQuery,\n              variables: {id: obj.userId}\n            })\n            resolve(obj.delayTimes < user.role.maxDelayTimes)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      }\n    },\n    BookComment: {\n      id (obj, args, context) {\n        return obj._id\n      },\n      thumbs (obj, args, context) {\n        return obj.useful.length\n      }\n    },\n    Collection: {\n      id (obj, args, context) {\n        return obj._id\n      },\n      books (obj, args, context) {\n        const bookIds = obj.bookIds\n        return new Promise((resolve, reject) => {\n          try {\n            const books = bookIds.map(async (id) => {\n              const {data: {book}} = await context.client.query({\n                query: GetBookByIDQuery,\n                variables: {id}\n              })\n              return book\n            })\n            resolve(books)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      }\n    },\n    Post: {\n      id(obj, args, context, info) {\n        return obj._id\n      },\n      book(obj, args, context) {\n        if (obj.messageType === 'book') {\n          const Book = context.db.model('Book')\n          return Book.findById(obj.message).exec()\n        } else {\n          return null\n        }\n      }\n    },\n    Feedback: {\n      id(obj, args, context, info) {\n        return obj._id\n      }\n    },\n    ReadPlan: {\n      id(obj, args, context, info) {\n        return obj._id\n      }\n    },\n    Plan: {\n      book(obj, args, context, info) {\n        const Book = context.db.model('Book')\n        return Book.findById(obj.bookId).exec()\n      },\n      process (obj, args, context, info) {\n        return new Promise(async (resolve, reject) => {\n          const Book = context.db.model('Book')\n          try {\n            const result = await Book.aggregate().match({_id: obj.bookId}).lookup({\n              from: 'records',\n              let: {isbn: '$isbn'},\n              pipeline: [{\n                $match: {\n                  $expr: {\n                    $and: [{\n                      $eq: [{$toString: obj.userId}, '$userId']\n                    }, {\n                      $eq: ['$$isbn', '$isbn']\n                    }]\n                  }\n                }\n              }, {\n                $project: {_id: 0, returnDate: 1}\n              }],\n              as: 'record'\n            }).project({\n              _id: 0,\n              record: {$arrayElemAt: ['$record', 0]}\n            }).exec()\n            console.log(result)\n            if (result.length === 0) resolve(0)\n            else if (result[0].reocrd.returnDate) resolve(100)\n            else {\n              let [start, end] = timespan.map(date => moment(date))\n              const total = end.diff(start, 'days')\n              const process = moment().diff(start, 'days')\n              if (process >= total) resolve(99)   // 如果逾期未读完，返回完成进度为99\n              resolve(Math.round(process / total * 100))\n            }\n          } catch (e) {\n            reject(e)\n          }\n        })\n\n      }\n    },\n    Query: {\n      books (obj, args, context, info) {\n        const Book = context.db.model('Book')\n        return Book.find({}).skip(args.skip).limit(args.limit).lean().exec()\n      },\n      book (obj, args, context, info) {\n        const Book = context.db.model('Book')\n        return Book.findById(args.id).lean().exec()\n      },\n      bookByISBN (obj, args, context, info) {\n        const Book = context.db.model('Book')\n        return Book.findOne({isbn: args.isbn}).lean().exec()\n      },\n      bookByCoverID (obj, { id }, context, info) {\n        const Book = context.db.model('Book')\n        return Book.findOne({cover: id}).lean().exec()\n      },\n      booksHaveCover (obj, args, context, info) {\n        const Book = context.db.model('Book')\n        return Book.where('cover').ne(null).lean().exec()\n      },\n      booksWithoutCover (obj, {skip, limit}, context, info) {\n        const Book = context.db.model('Book')\n        return Book.find({cover: null}).skip(skip).limit(limit).lean().exec()\n      },\n      booksFiltered (obj, {skip, limit, filter}, context, info) {\n        const Book = context.db.model('Book')\n        if (filter && filter.keyword) {\n          return Book.find({$text: {$search: filter.keyword}}, {score: {$meta: \"textScore\"}})\n            .sort( { score: { $meta: \"textScore\" } } ).skip(skip).limit(limit).exec()\n        }\n        let query = Book.find({})\n        if (filter && filter.category) query = query.regex('category', new RegExp(`^${filter.category}`))\n        if (filter && filter.publisher) query = query.where('publisher', filter.publisher)\n        if (filter && filter.count) query = query.gte('count', filter.count)\n        if (filter && filter.authors) query = query.in('authors', filter.authors)\n        if (filter && filter.sortBy) query = query.sort({[filter.sortBy]: -1})\n        return query.skip(skip).limit(limit).exec()\n      },\n      bookCount (obj, {filter}, context, info) {\n        const Book = context.db.model('Book')\n        let query = Book.find({})\n        if (filter && filter.category) query = query.regex('category', new RegExp(`^${filter.category}`))\n        if (filter && filter.publisher) query = query.where('publisher', filter.publisher)\n        if (filter && filter.count) query = query.gte('count', filter.count)\n        if (filter && filter.authors) query = query.in('authors', filter.authors)\n        return query.count().exec()\n      },\n      selectOptions (obj, args, context, info) {\n        const Book = context.db.model('Book')\n        const p1 =  Book.distinct('authors').exec()\n        const p2 = Book.distinct('translators').exec()\n        const p3 = Book.distinct('publisher').exec()\n        // Promise.all返回的结果是数组类型的，必须将其转化为对象类型再返回\n        return Promise.all([p1, p2, p3]).then(([authors, translators, publishers]) => ({ authors, translators, publishers }))\n      },\n      publishers (obj, {category}, context) {\n        const Book = context.db.model('Book')\n        return Book.distinct('publisher', { category }).exec()\n      },\n      rootCategories (obj, args, context, info) {\n        const Category = context.db.model('Category')\n        // null可以匹配不存在，查找没有parent属性的Category就是根节点\n        return Category.find({parent: null}).lean().exec()\n      },\n      childrenCategories (obj, { id }, context, info) {\n        const Category = context.db.model('Category')\n        return Category.find({parent: id}).lean().exec()\n      },\n      childrenByPath (obj, { path }, context, info) {\n        const Category = context.db.model('Category')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const docs = await Category.aggregate([{\n              $graphLookup: {\n                from: \"categories\",\n                startWith: \"$parent\",\n                connectFromField: \"parent\",\n                connectToField: \"_id\",\n                as: \"result\"\n              }\n            }, {\n              $project: {\n                path: {\n                  $concat: [{\n                    $reduce: {\n                      input: \"$result\",\n                      initialValue: '',\n                      in: {\n                        $concat: [\"$$value\", {\n                          $cond: [{$eq: [\"$$value\", '']}, '', '/']\n                        }, \"$$this.label\"]\n                      }\n                    }\n                  }, {\n                    $cond: [{\n                      $eq: [{ $size: \"$result\" }, 0]\n                    }, \"\", \"/\"]\n                  } , \"$label\"]\n                }\n              }\n            }, {\n              $match: {path: path}\n            }]).exec()\n            if (!docs || !docs.length) resolve([])\n            const children = await Category.find({parent: docs[0]._id}).exec()\n            resolve(children)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      hasChildCategories (obj, { id }, context, info) {\n        const Category = context.db.model('Category')\n        return new Promise((resolve, reject) => {\n          Category.count({parent: id}, function (err, count) {\n            if (err) reject(err)\n            else if (count > 0) resolve(true)\n            else resolve(false)\n          })\n        })\n      },\n      categories (obj, args, context, info) {\n        const Category = context.db.model('Category')\n        return Category.find({}).lean().exec()\n      },\n      bugCovers (obj, args, context, info) {\n        const BugReport = context.db.model('BugReport')\n        return BugReport.find({keyword: 'COVER'}).nin('status', ['RESOLVED', 'REJECTED']).exec()\n      },\n      buggy (obj, { id }, context, info) {\n        const BugReport = context.db.model('BugReport')\n        return BugReport.find({}).or([{bookId: id}, {coverId: id}]).findOne().exec()\n      },\n      outdatedRecords (obj, args, context, info) {\n        // 从给定起始日期往前推30天即为借书时间的下限\n        const from = new Date(args.from.valueOf() - MAX_BORROW_DURATION)\n        // 未提供to参数则从from参数往后推3天，即查询从from开始3天内到期的图书\n        let to = args.to || new Date(args.from.valueOf() + DEFAULT_CHECK_DURATION)\n        // 再从to的日期往前推30天得到借书时间的上限\n        to = new Date(to.valueOf() - MAX_BORROW_DURATION)\n        const Record = context.db.model('Record')\n        return Record.find({state: 'BORROWED'}).where('date').gte(from).lte(to).exec()\n      },\n      records (obj, { skip, limit, filter }, context, info) {\n        const Record = context.db.model('Record')\n        let query = Record.find({})\n        if (filter && filter.from) {\n          query = query.gt('date', filter.from)\n        }\n        if (filter && filter.to) {\n          query = query.lt('date', filter.to)\n        }\n        if (filter && filter.deadline) {\n          const deadline = moment().add(filter.deadline, 'days').toDate()\n          query = query.gt('deadline', Date.now()).lt('deadline', deadline)\n        }\n        if (filter && filter.state) {\n          const state = filter.state === 'BORROWED' ? 'borrowed' : 'returned'\n          query = query.where('state').equals(state)\n        }\n        return new Promise(async (resolve, reject) => {\n          if (filter && filter.username) {\n            try {\n              const {data} = await context.client.query({\n                query: GetUserByNamequery,\n                variables: {username: filter.username}\n              })\n              query = query.where('userId').equals(data.userByName.id)\n            } catch (e) { reject(e) }\n          } else if (filter && filter.userId) {\n            query = query.where('userId').equals(filter.userId)\n          } else {\n            // 如果不是管理员，则只能查询自己的记录\n            const { data } = await context.client.query({ query: GetLogedUserIDQuery })\n            if (data.logedUser && data.logedUser.role && !data.logedUser.role.isAdmin) {\n              query = query.where('userId').equals(data.logedUser.id)\n            }\n          }\n          try {\n            const records = await query.sort('-lastModified').skip(skip).limit(limit).exec()\n            resolve(records)\n          } catch (e) { reject(e) }\n        })\n      },\n      userStatistics (obj, { userId }, context, info) {\n        const Record = context.db.model('Record')\n        const Book = context.db.model('Book')\n        return new Promise(async (resolve, reject) => {\n          let maxHoldBooksCount = MAX_HOLD_BOOKS_COUNT\n          try {\n            const {data} = await context.client.query({\n              query: GetUserByIdQuery,\n              variables: { id: userId }\n            })\n            maxHoldBooksCount = data.user.role.maxHoldCount\n          } catch (e) {\n            reject(e)\n          }\n          Record.find({ userId, state: { $ne: 'cancelled' } }).sort('-date').exec(function (err, result) {\n            if (err) reject(err)\n            else if(result.length > 0) {\n              // res和result是一个读者的所有借书记录（含对同一本书的重复借阅）\n              const res = result.map(document => document.toObject({ virtuals: true }))\n              // 当前已借的图书\n              const borrowed = res.filter(doc => doc.state === 'borrowed')\n              // 当前可借书的数量为最大可借书数减去已借书（尚未归还）的数\n              const maxHoldCount = maxHoldBooksCount - borrowed.length\n              // 未逾期还书的次数\n              const num = res.filter(doc => !doc.timeout).length\n              // 计算信用分数（应以所有借书次数和逾期次数为准），最高5分,保留1位小数\n              const credit = new Number(num / res.length * 5).toFixed(1)\n              // 相同的图书只保留最近一次的记录\n              const set = new Set() // 利用Set不重复性来过滤重复图书\n              const docs = res.filter(doc => {\n                if (!set.has(doc.isbn)) {\n                  set.add(doc.isbn)\n                  return true\n                } else {\n                  return false\n                }\n              })\n              // 读过的书的总数\n              const readCount = docs.length\n              // 只取前5条记录\n              const recentRead = docs.slice(0, RECENT_READ_COUNT)\n              const isbns = docs.map(doc => doc.isbn)\n              // 先根据isbn匹配图书,然后根据category分组并计数，此时返回结果格式为：{_id: '分类1',count: 10}\n              // 根据计数结果倒序排序，并只取前3个结果\n              Book.aggregate([{ $match: { isbn: { $in: isbns } } }])\n                .group({ _id: '$category', count: { $sum: 1 } })\n                .sort('-count').limit(INTEREST_CATEGORIES_COUNT)\n                .exec(function (err, res) {\n                  if (err) reject(err)\n                  else {\n                    const interests = res.map(doc => doc._id) || []\n                    resolve({ maxHoldCount,readCount, credit, recentRead, interests })\n                  }\n                })\n            } else {\n              resolve({ maxHoldCount: maxHoldBooksCount, readCount: 0, credit: 0, recentRead: [], interests: [] })\n            }\n          })\n        })\n      },\n      coversPage (obj, {page, size, filter}, context, info) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            let query = {tag: 'BOOK'}\n            switch (filter) {\n              case 'SHOW_UNRELATED':\n                const {data: {booksHaveCover}} = await context.client.query({\n                  query: BooksHaveCoverQuery,\n                  fetchPolicy: 'network-only'\n                })\n                const covers = booksHaveCover.map(({cover}) => cover)\n                console.log(covers.length)\n                query['_id'] = {$nin: covers}\n                break\n              case 'SHOW_BUGS':\n                const {data: {bugCovers}} = await context.client.query({query: BugCoversQuery, fetchPolicy: 'network-only'})\n                const coversIDs = bugCovers.map(({coverId}) => coverId)\n                query['_id'] = {'$in': coversIDs}\n                break\n            }\n            query = JSON.stringify(query)\n            const {data: {covers}} = await context.client.query({query: CoversQuery, variables: {page, size, query}})\n            resolve({covers, hasMore: covers.length === size})\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      coversCount (obj, args, context, info) {\n        async function count (filter, size) {\n          const {data: {coversPage}} = await context.client.query({query: CoversPageQuery, variables: {filter, size, page: 0}})\n          return coversPage.covers.length\n        }\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data: {coversTotal}} = await context.client.query({query: CoversTotalQuery, variables: {query: JSON.stringify({tag: 'BOOK'})}})\n            const p1 = count('SHOW_UNRELATED', coversTotal)\n            const p2 = count('SHOW_BUGS', coversTotal)\n            const [unrelatedCount, bugsCount] = await Promise.all([p1, p2])\n            resolve({unrelatedCount, bugsCount, total: coversTotal})\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      collection (obj, { userId, skip, limit }, context, info) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const Collection = context.db.model('Collection')\n            let aggregate = Collection.aggregate().match({userId}).unwind('books').lookup({\n              from: 'books',\n              let: {bookId: '$books.id'},\n              pipeline: [{\n                $match: {\n                  $expr: {\n                    $eq: [{$toString: '$_id'}, '$$bookId']\n                  }\n                }\n              }],\n              as: 'book'\n            })\n            // aggregate.exec(function (err, doc) {\n            //   console.log(doc)\n            // })\n            aggregate = aggregate.group({\n              _id: null,\n              collectedBooks: {\n                $push: {$mergeObjects: [{$arrayElemAt: ['$book', 0]}, {iat: '$books.iat'}]}\n              }\n            })\n            const result = await aggregate.exec()\n            if (!result[0]) resolve([])\n            else {\n              const books = [...result[0].collectedBooks]\n              const end = limit > 0 ? (limit + skip) : books.length\n              const sliced = books.sort((a, b) => a.iat < b.iat).slice(skip, end)\n              resolve(sliced)\n            }\n          } catch (e) {\n            reject(e)\n          }\n        })\n\n        if (typeof skip === 'number') query = query.skip(skip)\n        if (typeof limit === 'number') query = query.limit(limit)\n        return query.exec()\n      },\n      popularAuthors (obj, {category}, context) {\n        const Book = context.db.model('Book')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const authors = await Book.aggregate().match({ category }).unwind('authors')\n              .group({ _id: '$authors', count: { $sum: 1 } }).sort('-count').limit(7).exec()\n            // console.log(authors)\n            resolve(authors.map(({ _id }) => _id))\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      bookComment (obj, {id}, context) {\n        const BookComment = context.db.model('BookComment')\n        return BookComment.findById(id).exec()\n      },\n      // 热门评论的计算方法：先根据认为评论有用的用户数倒序排列，再根据评论日期倒序排列\n      bookComments (obj, {skip, limit, bookId}, context) {\n        const BookComment = context.db.model('BookComment')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const result = await BookComment.aggregate([{\n              $match: {bookId}\n            }, {\n              $project: {\n                bookId: 1,\n                userId: 1,\n                details: 1,\n                title: 1,\n                score: 1,\n                postDate: 1,\n                useful: 1,\n                count: {\n                  $size: \"$useful\"\n                }\n              }\n            }, {\n              $sort: {count: -1, postDate: -1}\n            }]).skip(skip).limit(limit).exec()\n            // console.log(result)\n            resolve(result)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      bookCommentsByUser (obj, {skip, limit, userId}, context) {\n        const BookComment = context.db.model('BookComment')\n        return BookComment.find({userId}).sort('-postDate').skip(skip).limit(limit).exec()\n      },\n      bookCommentsProfile (obj, {bookId}, context) {\n        const BookComment = context.db.model('BookComment')\n        let aggregate = BookComment.aggregate()\n        // 根据bookId匹配该书的所有评论\n        aggregate = aggregate.match({ bookId })\n        // 按评分分组，分组完之后的结果数组应该最多只有5个元素，分别对应1、2、3、4、5颗星，groupCount代表的是对应评分的人数\n        aggregate = aggregate.group({\n          _id: \"$score\",\n          groupCount: { $sum: 1 }\n        })\n        // 按null分组可以计算总的评分人数，即把各组人数相加；最大评分，即分组键_id的最大值；总分值，即每个评分等级乘以对应的人数再求和，总分值是为了下一步求平均分做准备的，因为$divide和$multiply这些操作符\n        // 不属于累加操作符，不能直接作为group下的根操作；最关键的，是将各评分等级和相应人数记录下来，即记到group数组中，以便于下一步的时候求各评分等级所占比重\n        aggregate = aggregate.group({\n          _id: null,\n          max: { $max: \"$_id\" },\n          count: { $sum: \"$groupCount\" },\n          totalScore: { $sum: { $multiply: [\"$groupCount\", \"$_id\"] } },\n          group: {\n            $push:\n              {\n                level: \"$_id\",\n                groupCount: \"$groupCount\"\n              }\n          }\n        })\n        // 在上一步的基础上，进行映射project操作：_id字段就不要了；max和count字段直接保留就行；增加average字段，用上一步算好的总分值除以总人数即可；group字段要使用$map操作符进行映射，对于每一个group对象,\n        // level字段直接原样输出，percent字段拿groupCount除以总count即得出所占比例\n        aggregate = aggregate.project({\n          _id: 0,\n          max: 1,\n          count: 1,\n          group: {\n            $map: {\n              input: \"$group\",\n              as: \"group\",\n              in: {\n                level: \"$$group.level\",\n                percent: {\n                  $divide: [\"$$group.groupCount\", \"$count\"]\n                }\n              }\n            }\n          },\n          average: { $divide: [\"$totalScore\", \"$count\"] }\n        })\n        return new Promise(async (resolve, reject) => {\n          try {\n            const res = await aggregate.exec()\n            // 最后要记住，aggregate返回的结果一直都是数组，即使只有1个元素，所以直接返回数组第一个元素即可\n            resolve(res[0])\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      hasThumbed (obj, {id, userId}, context) {\n        const BookComment = context.db.model('BookComment')\n        return BookComment.findById(id).in('useful', userId).exec()\n      },\n      hasUserCommented (obj, {userId, bookId}, context) {\n        const BookComment = context.db.model('BookComment')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const comment = await BookComment.findOne({userId, bookId}).exec()\n            resolve(!!comment)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      cartCount (obj, args, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const Cart = context.db.model('Cart')\n            const cart = await Cart.findOne({userId: data.logedUser.id}).exec()\n            if (cart) {\n              resolve(cart.get('bookIds').length)\n            }\n            resolve(0)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      booksInCart (obj, args, context) {\n        const Cart = context.db.model('Cart')\n        const Book = context.db.model('Book')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const { data } = await context.client.query({ query: GetLogedUserIDQuery })\n            if (!data.logedUser) throw new Error('用户未登录')\n            const result = await Cart.aggregate().match({userId: data.logedUser.id}).unwind('bookIds').lookup({\n              from: 'books',\n              localField: 'bookIds',\n              foreignField: '_id',\n              as: 'book'\n            }).group({\n              _id: null,\n              books: {\n                $push: {\n                  $arrayElemAt: ['$book', 0]\n                }\n              }\n            })\n            const [first] = result\n            resolve(first ? first.books : [])\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      subsInCart (obj, args, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const Cart = context.db.model('Cart')\n            const result = await Cart.aggregate().match({userId: data.logedUser.id}).unwind('subscriptions').lookup({\n              from: 'books',\n              localField: 'subscriptions',\n              foreignField: 'isbn',\n              as: 'book'\n            }).group({\n              _id: null,\n              books: {\n                $push: {\n                  $arrayElemAt: ['$book', 0]\n                }\n              }\n            }).exec()\n            if (result[0]) resolve(result[0].books)\n            else resolve([])\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      booksInPlan (obj, { userId, kind }, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            let id = userId\n            if (!id) {\n              const {data} = await context.client.query({query: GetLogedUserIDQuery})\n              id = data.logedUser.id\n            }\n            const Reserve = context.db.model('Reserve')\n            const results = await Reserve.aggregate().match({ userId: id, kind }).unwind('bookIds').lookup({\n              from: 'books',\n              localField: 'bookIds',\n              foreignField: '_id',\n              as: 'book'\n            }).group({\n              _id: null,\n              expireAt: {\n                $push: \"$expireAt\"\n              },\n              books: {\n                $push: {\n                  $arrayElemAt: ['$book', 0]\n                }\n              }\n            }).project({\n              _id: 0,\n              books: 1,\n              expireAt: { $arrayElemAt: ['$expireAt', 0] }\n            })\n            resolve(results[0])\n          } catch (e) {\n            reject(e)\n          }\n        })\n\n      },\n      getSession (obj, {participators}, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const queries = participators.map(userId => ({participators: userId}))\n            queries.push({participators: data.logedUser.id})\n            const len = queries.length\n            const Conversation = context.db.model('Conversation')\n            const result = await Conversation.aggregate().match({$and: queries}).project({\n              _id: 0,\n              id: {\n                $cond: [{\n                  $eq: [{$size: '$participators'}, len]\n                }, '$_id', null]\n              }\n            }).exec()\n            // console.log(result)\n            const item = result.filter(({id}) => !!id)[0]\n            if (item) resolve(item.id)\n            else {\n              const conversation = await new Conversation({participators: [...participators, data.logedUser.id]}).save()\n              resolve(conversation.id)\n            }\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      posts (obj, {sessionId, skip, limit}, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const Post = context.db.model('Post')\n            // 按日期降序排列，筛选limit条记录，按照年、月、日、小时、分钟相同的进行分组，即每分钟的信息编成1组\n            let aggregate = Post.aggregate().match({sessionId}).sort('-iat').skip(skip).limit(limit).group({\n              _id: {\n                year: {$toString: {$year: {date: '$iat'}}}, // 四位年份（字符串）\n                month: {$dateToString: {date: '$iat', format: '%m'}}, // 2位月份，前面补0（字符串）\n                day: {$dateToString: {date: '$iat', format: '%d'}}, // 2位日期，前面补0（字符串）\n                hour: {$dateToString: {date: '$iat', format: '%H'}}, // 2位小时，前面补0，（字符串）\n                minute: {$dateToString: {date: '$iat', format: '%M'}} // 2位分钟，前面补0，（字符串）\n              },\n              posts: {\n                $push: {\n                  _id: '$_id',\n                  postBy: '$postBy',\n                  message: '$message',\n                  messageType: '$messageType',\n                  status: '$status',\n                  iat: '$iat',\n                  sessionId: '$sessionId'\n                }\n              }\n            })\n            // 把group的_id重新还原位日期格式，便于后面使用moment进行格式化\n            aggregate = aggregate.project({\n              _id: 0,\n              posts: 1,\n              issueAt: {\n                $dateFromString: {\n                  dateString: {\n                    $concat: ['$_id.year', '-', '$_id.month', '-', '$_id.day', 'T', '$_id.hour', ':', '$_id.minute', ':00.000Z']\n                  }\n                }\n              }\n            }).sort('issueAt')\n            const posts = await aggregate.exec()\n            const result = posts.map(({posts, issueAt}) => {\n              posts.sort((a, b) => a.iat > b.iat)\n              return { posts, iat: fmtPostDate(issueAt) }\n            })\n            resolve(result)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      feedbacks (obj, args, context) {\n        const Feedback = context.db.model('Feedback')\n        return new Promise(async (resolve, reject) => {\n          const {data} = await context.client.query({query: GetLogedUserIDQuery})\n          if (!data.logedUser) throw new Error('用户未登录')\n          if (!data.logedUser.role.isAdmin) throw new Error('没有权限查看')\n          let query = Feedback.find({})\n          const { category } = args\n          if (category) query = query.find({category})\n          try {\n            resolve(await query.exec())\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      readPlans (obj, args, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const ReadPlan = context.db.model('ReadPlan')\n            const readPlans = await ReadPlan.find({userId: data.logedUser.id}).sort('-createAt').exec()\n            resolve(readPlans)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      interests (obj, args, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) resolve(null)\n            const Record = context.db.model('Record')\n            let result = await Record.aggregate().match({userId: data.logedUser.id, state: {$ne: 'cancelled'}}).lookup({\n              from: 'books',\n              localField: 'isbn',\n              foreignField: 'isbn',\n              as: 'book'\n            }).project({\n              _id: 0,\n              category: {$arrayElemAt: ['$book.category', 0]}\n            }).group({\n              _id: '$category',\n              count: {$sum: 1}\n            }).sort('-count').project({\n              category: '$_id',\n              count: 1\n            }).exec()\n            const total = result.reduce((memo, {count}) => {\n              memo = memo + count\n              return memo\n            }, 0)\n            result = result.map(({category, count}) => ({count, category: category.split('/').pop(), percent: Number(Number(count/total*100).toFixed(2))}))\n            console.log(result)\n            if (result.length > 5) {\n              result = result.slice(0, 5)\n              const props = result.slice(5).reduce((memo, {count, percent}) => {\n                memo.percent = memo.percent + percent\n                memo.count = memo.count + count\n                return memo\n              }, {percent: 0, count: 0})\n              result.push({...props, category: '其它'})\n            }\n            resolve(result)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      mostBorrowed (obj, {skip, limit}, context) {\n        const Record = context.db.model('Record')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const result = await Record.aggregate().group({\n              _id: '$isbn',\n              count: {$sum: 1}\n            }).sort('-count').skip(skip).limit(limit).lookup({\n              from: 'books',\n              localField: '_id',\n              foreignField: 'isbn',\n              as: 'book'\n            }).project({\n              _id: 0,\n              count: 1,\n              book: {$arrayElemAt: ['$book', 0]}\n            }).exec()\n            console.log(result)\n            resolve(result)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      mostCollected (obj, {skip, limit}, context) {\n        const Collection = context.db.model('Collection')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const result = await Collection.aggregate().unwind('books').group({\n              _id: '$books.id',\n              count: {$sum: 1}\n            }).sort('-count').skip(skip).limit(limit).lookup({\n              from: 'books',\n              let: {bookId: '$_id'},\n              pipeline: [{\n                $match: {\n                  $expr: {\n                    $eq: ['$$bookId', {$toString: '$_id'}]\n                  }\n                }\n              }],\n              as: 'book'\n            }).project({\n              _id: 0,\n              count: 1,\n              book: {$arrayElemAt: ['$book', 0]}\n            }).exec()\n            console.log(result)\n            resolve(result)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      mostRecommanded (obj, {skip, limit}, context) {\n        return new Promise(async (resolve, reject) => {\n          const Post = context.db.model('Post')\n          try {\n            const result = await Post.aggregate().match({\n              messageType: 'book'\n            }).group({\n              _id: '$message',\n              count: {$sum: 1}\n            }).sort('-count').skip(skip).limit(limit).lookup({\n              from: 'books',\n              let: {bookId: '$_id'},\n              pipeline: [{\n                $match: {\n                  $expr: {\n                    $eq: ['$$bookId', {$toString: '$_id'}]\n                  }\n                }\n              }],\n              as: 'book'\n            }).project({\n              _id: 0,\n              count: 1,\n              book: {$arrayElemAt: ['$book', 0]}\n            }).exec()\n            console.log(result)\n            resolve(result)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      }\n    },\n    Mutation: {\n      batchAddBooks (obj, { books }, context, info) {\n        const Book = context.db.model('Book')\n        return new Promise((resolve, reject) => {\n          // 查询所有图书的isbn，isbn已经存在的不再写入数据库，避免duplicated key error\n          Book.find({}, {lean: true, select: 'isbn'}, function (err, docs) {\n            if (err) reject(err)\n            const isbns = docs.map(doc => doc.isbn)\n            const filteredBooks = books.filter(book => isbns.indexOf(book.isbn) === -1)\n            Book.insertMany(filteredBooks, {ordered: false}, function (error, docs) {\n              if (error) reject(error)\n              resolve(docs)\n            })\n          })\n        })\n      },\n      addBook (obj, args, context, info) {\n        const Book = context.db.model('Book')\n        const book = new Book(args.book)\n        return new Promise((resolve, reject) => {\n          book.save({lean: true}, (err, bookAdded) => {\n            if (err) reject(err)\n            else {\n              resolve(bookAdded)\n            }\n          })\n        })\n      },\n      updateBookByID (obj, args, context, info) {\n        const Book = context.db.model('Book')\n        const { id, book } = args\n        return new Promise((resolve, reject) => {\n          Book.findById(id).exec((err, doc) => {\n            if (err) reject(err)\n            else {\n              // 如果更新了cover的话，要将原来cover对应的图片文件从数据库中删除，以避免产生垃圾\n              if (book.cover && doc.get('cover')) {\n                const p1 = context.client.mutate({\n                  mutation: gql`\n                    mutation DeleteCoverMutation($id: ID!) {\n                      delFileByID(id: $id) {\n                        id\n                      }\n                    }\n                  `,\n                  variables: { id: doc.get('cover') }\n                })\n                doc.set(book)\n                const p2 = doc.save()\n                Promise.all([p1, p2]).then(([id, book]) => resolve(book)).catch(err => reject(err))\n              } else {\n                doc.set(book)\n                doc.save().then(book => resolve(book)).catch(err => reject(err))\n              }\n            }\n          })\n        })\n      },\n      batchUpdateBookCover (obj, { maps }, context, info) {\n        const Book = context.db.model('Book')\n        const bulkWriteOperations = maps.map(({bookId, coverId}) => ({\n          updateOne: {\n            filter: { '_id': bookId },\n            update: { 'cover': coverId }\n          }\n        }))\n        return new Promise((resolve, reject) => {\n          Book.bulkWrite(bulkWriteOperations, { ordered: false }, function (err, bulkOpResult) {\n            if (err) reject(err)\n            else {\n              resolve(true)\n            }\n          })\n        })\n      },\n      delBookById (obj, { id }, context, info) {\n        const Book = context.db.model('Book')\n        return new Promise((resolve, reject) => {\n          Book.findByIdAndRemove(id, { lean: true }, (err, bookDeleted) => {\n            if (err) reject(err)\n            else {\n              context.client.mutate({\n                mutation: DeleteCoverMutation,\n                variables: { id: bookDeleted.cover }\n              }).then(data => {\n                resolve(bookDeleted)\n              }).catch(err => reject(err))\n            }\n          })\n        })\n      },\n      addCategory (obj, args, context, info) {\n        const Category = context.db.model('Category')\n        const category = new Category(args)\n        return new Promise((resolve, reject) => {\n          category.save({lean: true}, function (err, categoryAdded) {\n            if (err) reject(err)\n            else {\n              resolve(categoryAdded)\n            }\n          })\n        })\n      },\n      updateCategory (obj, args , context, info) {\n        const Category = context.db.model('Category')\n        const { id, ...update } = args\n        return Category.findByIdAndUpdate(id, update, {new: true}).lean().exec()\n      },\n      // 删除分类时，同步将所有子类一起删除\n      removeCategory (obj, { id }, context, info) {\n        const Category = context.db.model('Category')\n        return new Promise((resolve, reject) => {\n          Category.find({}, 'parent', {lean: true}, function (err, categories) {\n            if (err) reject(err)\n            const delIDs = getChildren(categories, id).concat(id)\n            console.log(delIDs)\n            Category.deleteMany({\"_id\": {\"$in\": delIDs}}, function (err) {\n              if (err) reject(err)\n              else {\n                resolve(true)\n              }\n            })\n          })\n        })\n      },\n      addBugReport (obj, {bugReport}, context, info) {\n        const BugReport = context.db.model('BugReport')\n        return new BugReport(bugReport).save()\n      },\n      updateBugStatus(obj, {id, status}, context, info) {\n        const BugReport = context.db.model('BugReport')\n        return BugReport.findByIdAndUpdate(id, {status}, {new: true}).exec()\n      },\n      \n      //如果出现数据一致性问题，比如一本书数量减少了1本，但是在更新state为applied时发生了错误，由定时器进行检查并回滚\n      borrowBooks (obj, { userId, isbns } , context, info) {\n        const Record = context.db.model('Record')\n        const promise = context.client.query({query: GetUserByIdQuery, variables: {id: userId}})\n        return promise.then(({data: {user}}) => {\n          const deadline = moment().add(user.role.maxBorrowDuration, 'days').toDate()\n          const records = isbns.map(isbn => ({\n            userId,\n            isbn,\n            deadline,\n            state: 'initial'\n          }))\n          const defer = Record.insertMany(records, { ordered: false })\n          return defer.then(() => {\n            const promises = isbns.map((isbn) => Transaction.Books.startTransaction(context, isbn, 'initial', userId))\n            return Promise.all(promises)\n          })\n        })\n      },\n      returnBooks (obj, { userId, isbns }, context, info) {\n        const promises = isbns.map((isbn) => Transaction.Books.startTransaction(context, isbn, 'borrowed', userId))\n        return new Promise(async (resolve, reject) => {\n          try {\n            const result = await Promise.all(promises)\n            const Cart = context.db.model('Cart')\n            resolve(result)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      delayReturn (obj, { recordId }, context, info) {\n        const Record = context.db.model('Record')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const record = await Record.findById(recordId).exec()\n            const {data: {user}} = await context.client.query({query: GetUserByIdQuery, variables: {id: record.userId}})\n            if (record.delayTimes < user.role.maxDelayTimes) {\n              record.delayTimes = record.delayTimes + 1\n              record.deadline = moment(record.deadline).add(user.role.maxDelayDays, 'days')\n              await record.save()\n              resolve(true)\n            } else reject(new Error('已经达到最大续借过次数'))\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      delUnrelatedCovers (obj, args, context, info) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data: {booksHaveCover}} = await context.client.query({query: BooksHaveCoverQuery})\n            const covers = booksHaveCover.map(({cover}) => cover)\n            const query = JSON.stringify({_id: {$nin: covers}})\n            await context.client.mutate({mutation: DeleteFilesMutation, variables: {query}})\n            resolve(true)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      addToCollection (obj, { userId, bookId }, context, info) {\n        const Collection = context.db.model('Collection')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const col = await Collection.findOne({userId}).exec()\n            if (col) {\n              if (col.books.findIndex(({id}) => id === bookId) === -1) {\n                const books = [...col.books, {id: bookId, iat: new Date()}]\n                col.set('books', books)\n                await col.save()\n                resolve(true)\n              } else {\n                resolve(false)\n              }\n            } else {\n              await new Collection({userId, books: [{id: bookId, iat: new Date()}]}).save()\n              resolve(true)\n            }\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      delFromCollection (obj, { userId, bookIds }, context, info) {\n        const Collection = context.db.model('Collection')\n        return Collection.findOneAndUpdate({ userId }, { $pull: { books: { id: {$each: bookIds} } } }, { new: true }).exec()\n      },\n      addBookComment (obj, {comment}, context) {\n        const BookComment = context.db.model('BookComment')\n        return new BookComment(comment).save()\n      },\n      removeBookComment (obj, {id}, context) {\n        const BookComment = context.db.model('BookComment')\n        return BookComment.findByIdAndRemove(id).exec()\n      },\n      thumbBookComment (obj, {id, userId}, context) {\n        const BookComment = context.db.model('BookComment')\n        return BookComment.findOneAndUpdate({_id: id, userId: {$ne: userId}}, {$addToSet: {useful: userId}}).exec()\n      },\n      unThumbBookComment (obj, {id, userId}, context) {\n        const BookComment = context.db.model('BookComment')\n        return BookComment.findByIdAndUpdate(id, {$pull: {useful: userId}}).exec()\n      },\n      addToCart (obj, { userId, bookId }, context) {\n        const Cart = context.db.model('Cart')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const result = await Cart.update({userId}, {$addToSet: {bookIds: bookId}}, {upsert: true}).exec()\n            // console.log(result)\n            resolve(!!result.nModified)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      removeFromCart (obj, { bookId }, context) {\n        const Cart = context.db.model('Cart')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const result = await Cart.update({userId: data.logedUser.id}, {$pull: {bookIds: bookId}}).exec()\n            resolve(!!result.nModified)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      moveFromCartToCollection (obj, { bookId }, context) {\n        const Cart = context.db.model('Cart')\n        const Collection = context.db.model('Collection')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const collection = await Collection.update({userId: data.logedUser.id, '$expr': {$not: {$in: [bookId, '$books.id']}}}, {$push: {books: {id: bookId, iat: new Date()}}}, { upsert: true })\n            const cart = await Cart.update({userId: data.logedUser.id}, {$pull: {bookIds: bookId}}).exec()\n            resolve(!!cart.nModified)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      addToSubscription (obj, { isbn }, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const Cart = context.db.model('Cart')\n            const result = await Cart.update({userId: data.logedUser.id}, {$addToSet: {subscriptions: isbn}}, {upsert: true}).exec()\n            resolve(!!result.nModified)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      removeFromSubscription (obj, { isbn }, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const Cart = context.db.model('Cart')\n            const result = await Cart.update({userId: data.logedUser.id}, {$pull: {subscriptions: isbn}}).exec()\n            resolve(!!result.nModified)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      addToBorrowPlan (obj, {bookIds, expireAt}, context) {\n        const Reserve = context.db.model('Reserve')\n        const Cart = context.db.model('Cart')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            let maxHoldCount = data.logedUser.statistics.maxHoldCount // 当前用户最多可借书的数量\n            const borrowPlan = await Reserve.findOne({userId: data.logedUser.id}).exec()\n            maxHoldCount = maxHoldCount - borrowPlan.bookIds.length // 减去当前已预约的书的数量\n            if (bookIds.length > maxHoldCount) throw new Error(`您当前最多只能预约${maxHoldCount}本书`)\n            const plan = await Reserve.update({userId: data.logedUser.id, kind: 'BORROW'}, {expireAt, $addToSet: {bookIds: {$each: bookIds}}}, {upsert: true}).exec()\n            if (!plan.nModified) throw new Error('已经预约过了')\n            const result = await Cart.update({userId: data.logedUser.id}, {$pull: { bookIds: { $in: bookIds } }}).exec()\n            // console.log(plan.nModified)\n            resolve(!!result.nModified)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      removeFromBorrowPlan (obj, {bookIds}, context) {\n        const Reserve = context.db.model('Reserve')\n        return new Promise(async (resolve, reject) => {\n          const {data} = await context.client.query({query: GetLogedUserIDQuery})\n          if (!data.logedUser) throw new Error('用户未登录')\n          const result = await Reserve.update({userId: data.logedUser.id, kind: 'BORROW'}, {$pull: { bookIds: { $in: bookIds } }}).exec()\n          // console.log(result)\n          resolve(!!result.nModified)\n        })\n      },\n      moveToCart (obj, {bookId}, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const userId = data.logedUser.id\n            const Reserve = context.db.model('Reserve')\n            const result = await Reserve.update({userId, kind: 'BORROW'}, {$pull: {bookIds: bookId}}).exec()\n            if (!result.nModified) throw new Error('从预约中删除失败')\n            const Cart = context.db.model('Cart')\n            const res = await Cart.update({userId}, {$addToSet: {bookIds: bookId}}, {upsert: true}).exec()\n            if (!res.nModified) throw new Error('向书单中添加失败')\n            resolve(true)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      addPost (obj, {message, messageType, sessionId}, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const Conversation = context.db.model('Conversation')\n            const {participators} = await Conversation.findById(sessionId, 'participators').exec()\n            // console.log(participators.length)\n            const status = participators.filter(userId => userId !== data.logedUser.id).map(id => ({receiver: id, unread: true}))\n            const post = {\n              message,\n              sessionId,\n              status,\n              messageType:  messageType || 'text',\n              iat: new Date(),\n              postBy: data.logedUser.id\n            }\n            const Post = context.db.model('Post')\n            const postAdded = await new Post(post).save()\n            // 在publish之前必须对Date进行序列化，因为publish的数据是不会通过Date的resolver进行序列化的\n            // let obj = postAdded.toObject()\n            // obj = {...obj, iat: obj.iat.getTime(), id: obj._id}\n            // console.log(obj)\n            pubsub.publish(POST_ADDED, {postAdded})\n            resolve(postAdded)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      commitFeedback (obj, {category, description}, context) {\n        const Feedback = context.db.model('Feedback')\n        return new Promise(async (resolve, reject) => {\n          const {data} = await context.client.query({query: GetLogedUserIDQuery})\n          if (!data.logedUser) throw new Error('用户未登录')\n          try {\n            const feedback = await new Feedback({\n              category,\n              description,\n              postBy: data.logedUser.id,\n              iat: new Date(),\n              status: 'UNREAD'\n            }).save()\n            resolve(true)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      handleFeedback (obj, {id, status, rejectReason}, context) {\n        const Feedback = context.db.model('Feedback')\n        return new Promise(async (resolve, reject) => {\n          const {data} = await context.client.query({query: GetLogedUserIDQuery})\n          if (!data.logedUser) throw new Error('用户未登录')\n          const adminEmail = data.logedUser.email\n          if (!data.logedUser.role.isAdmin) throw new Error('没有权限操作')\n          try {\n            const feedback = await Feedback.findByIdAndUpdate(id, {status}).exec()\n            if (feedback.postedUser && feedback.postedUser.email) {\n              const nodemailer = require('nodemailer')\n              let transporter = nodemailer.createTransport({\n                host: 'smtp.163.com',\n                port: 465,\n                secure: true,\n                auth: {\n                  user: emailAccount,\n                  pass: emailPassword\n                }\n              })\n              let result = ''\n              switch (status) {\n                case 'ADOPTED':\n                  result = '您的意见已经被采纳，工程师正在改进中。。。'\n                  break\n                case 'REJECTED':\n                  result = `您的意见经核查未被采纳，原因是：${rejectReason}。`\n                  break\n                default:\n                  result = '您的意见已经被采纳，错误已经修复或者新功能已经添加，欢迎体验并再次反馈！'\n              }\n              let mailOptions = {\n                from: `\"管理员\" <${emailAccount}>`,\n                to: feedback.postedUser.email,\n                subject: '感谢您的反馈',\n                text: result,\n                html: `<div><h1>${result}</h1></div>`\n              }\n              transporter.sendMail(mailOptions, (error, info) => {\n                if (error) {\n                  reject(error)\n                }\n                resolve(true)\n              })\n            }\n            resolve(true)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      addToReturnPlan (obj, {bookIds, expireAt}, context) {\n        const Reserve = context.db.model('Reserve')\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const plan = await Reserve.update({userId: data.logedUser.id, kind: 'RETURN'}, {\n              expireAt,\n              $addToSet: {bookIds: {$each: bookIds}}\n            }, {upsert: true}).exec()\n            resolve(!!plan.nModified)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      createReadPlan (obj, {plans, title}, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const ReadPlan = context.db.model('ReadPlan')\n            const readPlan = await new ReadPlan({plans, title, userId: data.logedUser.id, createAt: new Date()}).save()\n            resolve(readPlan)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      },\n      delReadPlan (obj, {id}, context) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            const {data} = await context.client.query({query: GetLogedUserIDQuery})\n            if (!data.logedUser) throw new Error('用户未登录')\n            const ReadPlan = context.db.model('ReadPlan')\n            const plan = ReadPlan.findByIdAndRemove(id).exec()\n            resolve(!!plan)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      }\n    },\n    Subscription: {\n      postAdded: {\n        subscribe: withFilter(\n          () => pubsub.asyncIterator(POST_ADDED),\n          (payload, variables) => {\n            return payload.postAdded.sessionId === variables.sessionId;\n          }\n        )\n      }\n    }\n}\nexport default resolvers\n"]}