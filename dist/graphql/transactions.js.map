{"version":3,"sources":["../../graphql/transactions.js"],"names":["Books","startTransaction","context","isbn","initialState","userId","Promise","resolve","reject","retriveRecord","t","updateStateToPending","applyTransaction","done","updateStateToDone","state","option","Record","db","model","opts","dateThreshold","Date","setMinutes","getMinutes","lastModified","$lt","findOne","exec","update","_id","$set","$currentDate","Book","book","pendingTransaction","indexOf","canBorrow","$inc","count","$push","$pull","setAttrs","returnDate","now","recoverFromPending","Transaction","console","log"],"mappings":"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","file":"transactions.js","sourcesContent":["const Books = {\n  // initialState借书时应为initial，还书时应为borrowed\n  startTransaction: (context, isbn, initialState, userId) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const t = await Books.retriveRecord(context, initialState, { isbn, userId })\n        await Books.updateStateToPending(context, t)\n        const done = await Books.applyTransaction(context, t)\n        await Books.updateStateToDone(context, t, done)\n        resolve('success')\n      } catch (e) {\n        reject(e)\n      }\n    })\n  },\n  retriveRecord (context, state, option = {}) {\n    const Record = context.db.model('Record')\n    let opts = { state, ...option }\n    if (state === 'pending' || state === 'applied') {\n      const dateThreshold = new Date()\n      dateThreshold.setMinutes(dateThreshold.getMinutes() - 30)\n      opts.lastModified = { $lt: dateThreshold }\n    }\n    return Record.findOne(opts).exec()\n  },\n  updateStateToPending (context, t) {\n    const Record = context.db.model('Record')\n    return Record.update({\n      _id: t._id, state: t.state\n    }, {\n      $set: { state: \"pending\" },\n      $currentDate: { lastModified: true }\n    }).exec()\n  },\n  applyTransaction: async (context, t) => {\n    const Book = context.db.model('Book')\n    try {\n      const book = await Book.findOne({isbn: t.isbn}).exec()\n      return new Promise(async (resolve) => {\n        // 如果pendingTransactions未记录record的_id，说明当前是在借书\n        // console.log(`${book.title}:${book.pendingTransaction}:${t._id}`)\n        if (book.pendingTransaction.indexOf(t._id) === -1) {\n          if (book.canBorrow()) {\n            await book.update({$inc: {count: -1}, $push: {pendingTransaction: t._id}}).exec()\n            resolve('borrowed')\n          } else {\n            resolve('cancelled')\n          }\n        } else { // 如果pendingTransactions已经记录了record的_id，说明当前是在还书\n          await book.update({$inc: {count: 1}, $pull: {pendingTransaction: t._id}}).exec()\n          resolve('returned')\n        }\n      })\n    } catch (e) {\n      throw e\n    }\n  },\n  updateStateToDone (context, t, done) {\n    const Record = context.db.model('Record')\n    const state = { state: done }\n    const setAttrs = done === 'returned' ? { ...state, returnDate: Date.now() } : state\n    const update = {\n      $set: setAttrs,\n      $currentDate: { lastModified: true }\n    }\n    return Record.update({ _id: t._id, state: \"pending\" }, update).exec()\n  },\n  recoverFromPending: async (context) => {\n    try {\n      let t = await Transaction.Books.retriveRecord(context, 'pending')\n      while (t) {\n        const done = await Books.applyTransaction(context, t)\n        await Books.updateStateToDone(context, t, done)\n        console.log(`Continue to finish Record: ${t._id}`)\n        t = await Transaction.Books.retriveRecord(context, 'pending')\n      }\n    } catch (e) { }\n  }\n}\nconst Transaction = { Books }\nexport default Transaction"]}