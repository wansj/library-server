{"version":3,"sources":["../../graphql/schema.js"],"names":["Types","require","Query","Mutation","Subscription","pubsub","iconv","generateRemoteSchema","fetcher","query","variables","operationName","context","body","Object","assign","file","stream","filename","mimetype","encoding","Promise","resolve","reject","pipe","decodeStream","collect","err","files","all","map","promise","then","result","JSON","stringify","method","headers","fetchResult","json","schema","executableSchema","generateUserSchema","graphqlContext","authorization","buildSchema","fileSchema","userSchema","bookSchema","typeDefs","resolvers","linkTypeDefs","schemas","Book","picture","fragment","parent","args","info","id","cover","mergeInfo","delegate","data","book","File","buggy","User","photo","avatar","statistics","userId","Record","user","BookComment","Feedback","postedUser","postBy","friendAdded","subscribe","asyncIterator","payload","friend","friendApproved","console","log","whose","tokenExpired","authToken","replace"],"mappings":"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","file":"schema.js","sourcesContent":["import {\n  makeExecutableSchema,\n  makeRemoteExecutableSchema,\n  introspectSchema,\n  mergeSchemas\n} from 'graphql-tools'\nimport { print } from 'graphql'\nimport { withFilter } from 'graphql-subscriptions'\nimport { RedisPubSub } from 'graphql-redis-subscriptions'\nimport resolvers from './resolvers'\nconst Types = require('./Types')\nconst Query = require('./Query')\nconst Mutation = require('./Mutation')\nconst Subscription = require('./Subscription')\nconst pubsub = new RedisPubSub()\nimport { remoteSchemaUrl, remoteSchemaUrl2 } from '../settings'\nimport fetch from 'node-fetch'\n// import { GetLogedUserIDQuery } from './constants'\nconst iconv = require('iconv-lite')\n\nconst generateRemoteSchema = async () => {\n  /**\n   * 此处不能使用JSON.stringify({ query, variables, operationName })，否则会使variables: {file: Promise}变成{file: {}}\n   */\n  const fetcher = async ({ query, variables, operationName, context }) => {\n    let body = Object.assign({}, { query, variables, operationName })\n    if (variables && variables.file) {\n      let { stream, filename, mimetype, encoding } = await variables.file\n      stream = await new Promise(((resolve, reject) => {\n        stream.pipe(iconv.decodeStream('base64')).collect(function(err, body) {\n          if(err) reject(err)\n          else resolve(body)\n        })\n      }))\n      body.variables.file = { stream, filename, mimetype, encoding }\n    } else if (variables && variables.files) {\n      const result = await Promise.all(variables.files.map(promise => {\n        return promise.then(async ({ stream, filename, mimetype, encoding }) => {\n          // 解码stream\n          stream = await new Promise((resolve, reject) => {\n            stream.pipe(iconv.decodeStream('base64')).collect(function(err, body) {\n              if(err) reject(err)\n              else resolve(body)\n            })\n          })\n          return { stream, filename, mimetype, encoding }\n        })\n      }))\n      body.variables.files = result\n    }\n    body = JSON.stringify(body)\n    const fetchResult = await fetch(remoteSchemaUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body\n    })\n    return fetchResult.json()\n  }\n  const schema = await introspectSchema(fetcher)\n  const executableSchema = makeRemoteExecutableSchema({\n    schema,\n    fetcher\n  })\n  return executableSchema\n}\n\nconst generateUserSchema = async () => {\n  const fetcher = async ({ query, variables, operationName, context }) => {\n    let headers = { 'Content-Type': 'application/json' }\n    // 这里要注意的是context是{graphqlContext: {db,client,authorization}}形式的，直接使用官网文档上context.authorization是不对的\n    if (context && context.graphqlContext.authorization) headers.authorization = context.graphqlContext.authorization\n    const fetchResult = await fetch(remoteSchemaUrl2, {\n      headers,\n      method: 'POST',\n      // 由于UserService中使用的是apollo-server-core2.0，query必须是string,所以必须使用print将query转化成string\n      // 解决方法来自于https://github.com/apollographql/graphql-tools/issues/891\n      body: JSON.stringify({ query: print(query), variables, operationName })\n    })\n    return fetchResult.json()\n  }\n  const schema = await introspectSchema(fetcher)\n  const executableSchema = makeRemoteExecutableSchema({\n    schema,\n    fetcher\n  })\n  return executableSchema\n}\nexport const buildSchema = async () => {\n  const fileSchema = await generateRemoteSchema()\n  const userSchema = await generateUserSchema()\n  const bookSchema =  makeExecutableSchema({\n    typeDefs: [Query, Mutation, Subscription, Types],\n    resolvers\n  })\n  const linkTypeDefs = `\n    extend type Book {\n      picture: File\n    }\n    extend type File {\n      book: Book\n      buggy: BugReport\n    }\n    extend type User {\n      photo: File\n      statistics: Statistics\n    }\n    extend type Record {\n      user: User\n    }\n    extend type BookComment {\n      user: User\n    }\n    extend type Feedback {\n      postedUser: User\n    }\n    extend type Subscription {\n      friendAdded(userId: String!): Friend\n      friendApproved(userId: String!): Friend\n      tokenExpired(token: String): String\n    }\n  `\n  const schema = mergeSchemas({\n    schemas: [bookSchema, fileSchema, userSchema, linkTypeDefs],\n    resolvers: mergeInfo => ({\n      Book: {\n        picture: {\n          fragment: `fragment BookFragment on Book { cover }`,\n          resolve(parent, args, context, info) {\n            const id = parent.cover\n            if (!id) return ''\n            const promise = mergeInfo.delegate('query', 'fileByID', { id }, context, info)\n            // 如果id不是null，但是查询不到File的话，说明外键cover已失效（对应的图片已删除），将cover置null。\n            // 这样就不必在删除图片的时候做关联更新了\n            promise.then((data) => {\n              if (!data && id) {\n                mergeInfo.delegate('mutation', 'updateBookByID', { id: parent.id, book: { cover: null } }, context, info)\n              }\n            })\n            return promise\n          }\n        }\n      },\n      File: {\n        book: {\n          fragment: `fragment FileFragment on File { id }`,\n          resolve(parent, args, context, info) {\n            const id = parent.id\n            if (id === null) return ''\n            return mergeInfo.delegate('query', 'bookByCoverID', { id }, context, info)\n          }\n        },\n        buggy: {\n          fragment: `fragment FileFragment on File { id }`,\n          resolve(parent, args, context, info) {\n            const id = parent.id\n            if (id === null) return ''\n            return mergeInfo.delegate('query', 'buggy', { id }, context, info)\n          }\n        }\n      },\n      User: {\n        photo: {\n          fragment: `fragment UserFragment on User { avatar }`,\n          resolve(parent, args, context, info) {\n            if (!parent.avatar) return ''\n            return mergeInfo.delegate('query', 'fileByID', { id: parent.avatar }, context, info)\n          }\n        },\n        statistics: {\n          fragment: `fragment UserFragment2 on User { id }`,\n          resolve(parent, args, context, info) {\n            if (!parent.id) return null\n            return mergeInfo.delegate('query', 'userStatistics', { userId: parent.id }, context, info)\n          }\n        }\n\n      },\n      Record: {\n        user: {\n          fragment: `fragment RecordFragment on Record { userId }`,\n          resolve(parent, args, context, info) {\n            if (!parent.userId) return null\n            return mergeInfo.delegate('query', 'user', { id: parent.userId }, context, info)\n          }\n        }\n      },\n      BookComment: {\n        user: {\n          fragment: `fragment BookCommentUser on BookComment { userId }`,\n          resolve(parent, args, context, info) {\n            if (!parent.userId) return null\n            return mergeInfo.delegate('query', 'user', { id: parent.userId }, context, info)\n          }\n        }\n      },\n      Feedback: {\n        postedUser: {\n          fragment: `fragment FeedbackFragment on Feedback { postBy }`,\n          resolve(parent, args, context, info) {\n            if (!parent.postBy) return null\n            return mergeInfo.delegate('query', 'user', { id: parent.postBy }, context, info)\n          }\n        }\n      },\n      Subscription: {\n        friendAdded: {\n          subscribe: withFilter(\n            () => pubsub.asyncIterator('friendAdded'),\n            async (payload, variables, context) => {\n              // console.log(payload.friendAdded.friend === variables.userId)\n              return payload.friendAdded.friend === variables.userId\n            }\n          )\n        },\n        friendApproved: {\n          subscribe: withFilter(\n            () => pubsub.asyncIterator('friendApproved'),\n            async (payload, variables, context) => {\n              console.log(payload.friendApproved.whose)\n              console.log(variables.userId)\n              return payload.friendApproved.whose === variables.userId\n            }\n          )\n        },\n        tokenExpired: {\n          subscribe: withFilter(\n            () => pubsub.asyncIterator('tokenExpired'),\n            async (payload, variables, context) => {\n              console.log(payload.tokenExpired)\n              console.log(context.authToken.replace('Bearer ', ''))\n              return payload.tokenExpired === context.authToken.replace('Bearer ', '')\n            }\n          )\n        }\n      }\n    })\n  })\n  return schema\n}\n"]}